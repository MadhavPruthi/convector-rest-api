import { Request, Response } from 'express';
import { <%= dto.controllerClassName %> } from '../../../smartContractControllers';
import { Models } from '../../../smartContractModels';

export class Controller {
<% dto.getAllMethods.forEach(function(method){ %>
  async <%= method %>(req: Request, res: Response): Promise<void> {
    let cntrl = await <%= dto.controllerClassName %>.init();
    let result = await cntrl.<%= method %>();
    res.json(result);
  }
<% }); %>
<% dto.getByIdMethods.forEach(function(method){ %>
  async <%= method %>(req: Request, res: Response) {
    let cntrl = await <%= dto.controllerClassName %>.init();
    let result = await cntrl.<%= method %>(req.params.id);
    if (!result) {
      return res.status(404);
    }
    res.json(result);
  }
<% });
  dto.createMethods.forEach(function(method){ %>
  async <%= method.methodName %>(req: Request, res: Response) {
    try {
      let cntrl = await <%= dto.controllerClassName %>.init();
      let modelRaw = req.body;
      let model = new Models.<%= method.methodParameterType %>(modelRaw);
      await cntrl.<%= method.methodName %>(model);
      res.send(201);
    } catch (ex) {
      console.log(ex.message, ex.stack);
      res.status(500).send(ex);
    }
  }
<% });
dto.serviceMethods.forEach(function(method){ %>
async <%= method.methodName %>(req: Request, res: Response) {
  try {
    let cntrl = await <%= dto.controllerClassName %>.init();<%
    let parameterString = "";
    let parameters = new Array();
    method.parameters.forEach(function(parameter){
      parameters.push("req.params." + parameter.getName());
    });
    parameterString = parameters.join(','); %>
    await cntrl.<%= method.methodName %>(<%= parameterString %>);
    res.send(201);
  } catch (ex) {
    console.log(ex.message, ex.stack);
    res.status(500).send(ex);
  }
}
<% }); %>

}
export default new Controller();
