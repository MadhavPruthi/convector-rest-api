swagger: "2.0"
info:
  version: 1.0.0
  title: <%= dto[0].projectName %>
  description: <%= dto[0].projectName %> REST API Application
basePath: /api/v1/<%= dto[0].projectName %>

tags:
<% dto.forEach(function(innerDto){
    innerDto.models.forEach(function(model){ %>
  - name: <%= model.modelName %>s
    description: Simple <%= model.modelNameLowered %> endpoints
<% }); %><% }); %>

consumes:
  - application/json
produces:
  - application/json

definitions:
  <% dto.forEach(function(innerDto){
      let prefix = '';
      let controllerMethodPrefix = '';
      if (dto.length > 1) {
        prefix = innerDto.name + '/';
        controllerMethodPrefix = innerDto.name + '_';
      }
      innerDto.models.forEach(function(model){ %>
    <%= model.modelName %>Body:
      type: object
      title: <%= model.modelName %>
      required:
      <% model.modelProperties.forEach(function(prop){ %>   - <%= prop.propName %>
      <% }); %>properties:<% model.modelProperties.forEach(function(prop){ %>
        <%= prop.propName %>:
          type: <%= prop.propType %>
          example: <%= prop.propExample %><% });
        });
      });
      dto.forEach(function(innerDto){
      let prefix = '';
      let controllerMethodPrefix = '';
      if (dto.length > 1) {
        prefix = innerDto.name + '/';
        controllerMethodPrefix = innerDto.name + '_';
      }
   innerDto.serviceMethods.forEach(function(serviceMethod){ %>
    <%= controllerMethodPrefix + serviceMethod.methodName %>Body:
       type: object
       title: <%= controllerMethodPrefix + serviceMethod.methodName %>Params
       required:
       <% serviceMethod.methodParameters.forEach(function(parameter){ %>   - <%= parameter.name %>
       <% }); %>properties:<% serviceMethod.methodParameters.forEach(function(parameter){ %>
         <%= parameter.name %>:
           type: <%= parameter.type %>
           example: <%= parameter.example %><% });
          });
      });%>

paths:
<% dto.forEach(function(innerDto){
  let prefix = '';
  let controllerMethodPrefix = '';
  if (dto.length > 1) {
    prefix = innerDto.name + '/';
    controllerMethodPrefix = innerDto.name + '_';
  }
  let prefixWrote = false;
  innerDto.models.forEach(function(model){
    innerDto.getAllMethods.forEach(function(method){
      if (method.methodParameterType == model.modelName) {
        if (prefixWrote == false) { %>
  /<%= prefix + model.modelNameLowered %>s: <%
          prefixWrote = true;
        } %>
    get:
      tags:
        - <%= method.methodParameterType %>s
      description: Fetch all <%= method.methodParameterTypeLowered %>s
      responses:
        200:
          description: Returns all <%= method.methodParameterTypeLowered %>s <% } });
  innerDto.createMethods.forEach(function(method){
  if (method.methodParameterType == model.modelName) {
    if (prefixWrote == false) { %>
  /<%= prefix + model.modelNameLowered %>s: <%
      prefixWrote = true;
    } %>
    post:
      tags:
        - <%= method.methodParameterType %>s
      description: Create a new <%= method.methodParameterTypeLowered %>
      parameters:
        - name: <%= method.methodParameterTypeLowered %>
          in: body
          description: a <%= method.methodParameterTypeLowered %>
          required: true
          schema:
            $ref: "#/definitions/<%= controllerMethodPrefix + method.methodParameterType %>Body"
      responses:
        201:
          description: Successful insertion of <%= method.methodParameterTypeLowered %>s <% } });%>
<% innerDto.getByIdMethods.forEach(function(method){
  if (method.methodParameterType == model.modelName) { %>
  /<%= prefix + method.methodParameterTypeLowered %>s/{id}:
    get:
      tags:
        - <%= method.methodParameterType %>s
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the <%= method.methodParameterTypeLowered %> to retrieve
          type: string
      responses:
        200:
          description: Return the <%= method.methodParameterTypeLowered %> with the specified id
        404:
          description: <%= method.methodParameterType %> not found <% } }); });%>
<% innerDto.serviceMethods.forEach(function(serviceMethod){ %>
  /<%= prefix + serviceMethod.methodEndPoint %>:
    post:
      tags:
        - <%= serviceMethod.methodName %>
      description: <%= serviceMethod.methodName %>
      parameters:
        - name: <%= controllerMethodPrefix + serviceMethod.methodName %>Params
          in: body
          required: true
          schema:
            $ref: "#/definitions/<%= controllerMethodPrefix + serviceMethod.methodName %>Body"
      responses:
        201:
          description: <%= serviceMethod.methodName %> executed correctly
        500:
          description: <%= serviceMethod.methodName %> raised an exception
<% });
});%>
